-- Quartus II VHDL Template
-- Four-State Mealy State Machine

-- A Mealy machine has outputs that depend on both the state and
-- the inputs.	When the inputs change, the outputs are updated
-- immediately, without waiting for a clock edge.  The outputs
-- can be written more than once per state or per clock cycle.

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity fsm is
	port(
		clk	 : in	std_logic;
		reset	 : in	std_logic;
		round  : in natural range 0 to 10;
		
		enable_top 		: out std_logic;
		enable_regkey 	: out std_logic;
		enable_count 	: out std_logic;
		sel_mux 			: out std_logic
	);

end entity;

architecture rtl of fsm is
	-- Build an enumerated type for the state machine
	type state_type is (s0, s1, s2, s3, s4, s5, s6);
	-- Register to hold the current state
	signal state : state_type;

begin
	process (clk, reset)
	begin
		if (rising_edge(clk)) then
			if reset = '1' then
				state <= s0;
			else 
				case state is
					when s0=>
							state <= s1;
					when s1=>
							state <= s2;
					when s2=>
							state <= s3;
					when s3=>
						if (round = 10) then
							state <= s6;
						else
							state <= s4;
						end if;
					when s4=>
							state <= s5
					when s5=>
							state <= s2;
					when s6=>
							state <= s6;
				end case;
			end if;
		end if;
	end process;

	process (state)
	begin
			case state is
				when s0=>
					reset 			<= '1';
					enable_regkey 	<= '1';
					enable_top 		<= '0';
					enable_count 	<= '0';
					sel_mux 			<= '0';
				when s1=>
					reset 			<= '0';
					enable_regkey 	<= '1';
					enable_top 		<= '1';
					enable_count 	<= '0';
					sel_mux 			<= '0';
				when s2=>
					reset 			<= '0';
					enable_regkey 	<= '0';
					enable_top 		<= '1';
					enable_count 	<= '1';
					sel_mux 			<= '1';
				when s3=>
					reset 			<= '0';
					enable_regkey 	<= '1';
					enable_top 		<= '1';
					enable_count 	<= '0';
					sel_mux 			<= '1';
				when s4=>
					reset 			<= '0';
					enable_regkey 	<= '0';
					enable_top 		<= '1';
					enable_count 	<= '0';
					sel_mux 			<= '1';
				when s5=>
					reset 			<= '0';
					enable_regkey 	<= '0';
					enable_top 		<= '1';
					enable_count 	<= '0';
					sel_mux 			<= '1';
				when s6=>
					reset 			<= '0';
					enable_regkey 	<= '0';
					enable_top 		<= '0';
					enable_count 	<= '0';
					sel_mux 			<= '0';
			end case;
	end process;
end rtl;
